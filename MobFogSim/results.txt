public void printMigrationsDetalis_CSV() {
			String  resultFileName="result_CSV.csv";
		
			 
			
			
			
			
			/////////////////////////
			double energyConsumedMean = 0.0;
			int j = 0;
			 
			//Begin=========CLOUDLETS ENERGY CONSUMPTION"==========
			 
			for (FogDevice fogDevice : getServerCloudlets()) {
				if (fogDevice.getEnergyConsumption() != 5.8736831999993116E7) {
					System.out.println(fogDevice.getName() + ": Power = "
						+ fogDevice.getHost().getPower());
					System.out.println(fogDevice.getName() + ": Energy Consumed = "
						+ fogDevice.getEnergyConsumption());
					energyConsumedMean += fogDevice.getEnergyConsumption();
					j++;
				}
			}
			
			
			
			printResults("Total consumido Coudlets;"
					+ energyConsumedMean,
					resultFileName);
			printResults("Coudlets averageEnergyHistoryDevice;"
					+ String.valueOf(energyConsumedMean / j),
					resultFileName);
			
			
			
			
			///AP DEVICES ENERGY CONSUMPTION");
			energyConsumedMean = 0.0;
			for (FogDevice apDevice : getApDevices()) {
				System.out.println(apDevice.getName() + ": Energy Consumed = "
					+ apDevice.getEnergyConsumption());
				energyConsumedMean += apDevice.getEnergyConsumption();
				j++;
			}
			
			
			printResults("Total consumido AP(AP DEVICES);"
					+ energyConsumedMean,
					resultFileName);
			printResults("AP DEVICES averageEnergyHistoryDevice;"
					+ String.valueOf(energyConsumedMean / j),
					resultFileName);
			
			
			
			
			//SMARTTHINGS ENERGY CONSUMPTION");			
			energyConsumedMean = 0.0;
			for (FogDevice mobileDevice : getSmartThings()) {
				
				
				printResults( "mobileDevice:"+ mobileDevice.getName() + ": Power = ;"
						+ mobileDevice.getHost().getPower(),
						resultFileName);
				
				printResults( "mobileDevice:"+ mobileDevice.getName() + ": Energy Consumed;"
						+ mobileDevice.getEnergyConsumption(),
						resultFileName);
			}
			
			for (int i = 0; i < MyStatistics.getInstance().getPowerHistory().size(); i++) {
				
				printResults( "SmartThing(" + i + ") Power;"
						+ MyStatistics.getInstance().getPowerHistory().get(i),
						resultFileName);
				
			}
			
			
			for (int i = 0; i < MyStatistics.getInstance().getEnergyHistory().size(); i++) {
				
				energyConsumedMean += MyStatistics.getInstance().getEnergyHistory().get(i);
				
				printResults( "SmartThing(" + i + ") Energy Consumed;"
						+ MyStatistics.getInstance().getEnergyHistory().get(i),
						resultFileName);
			}
			//End=========CLOUDLETS ENERGY CONSUMPTION"==========
			
			
			
			 
		
			//"Begin=============NETWORK USAGE==============="/
			
			double deviceNetworkUsage = NetworkUsageMonitor.getNetworkUsage()
				- NetworkUsageMonitor.getNetWorkUsageInMigration();
			
						
			printResults("VM data transferred in migration;"
					+ NetworkUsageMonitor.getVMTransferredData(),
					resultFileName);
			
			printResults("getVMTransferredData / CloudSim.clock;"
					+ String.valueOf(NetworkUsageMonitor.getVMTransferredData() / CloudSim.clock()),
					resultFileName);
			
			
			
			/////
			printResults("Device's network usage;"
					+ deviceNetworkUsage,
					resultFileName);
			
			printResults("deviceNetworkUsage / CloudSim.clock;"
					+ String.valueOf(deviceNetworkUsage / CloudSim.clock()),
					resultFileName);
			
			
			
			
			
			//////
			printResults("Migration' network usage (total);"
					+  NetworkUsageMonitor.getNetWorkUsageInMigration(),
					resultFileName);
			
			printResults("Migration' network usage (mean);"
					+  NetworkUsageMonitor.getNetWorkUsageInMigration()
					/ MyStatistics.getInstance().getTotalMigrations(),
					resultFileName);
			
			printResults("getNetWorkUsageInMigration / CloudSim.clock;"
					+  String.valueOf(NetworkUsageMonitor.getNetWorkUsageInMigration() / CloudSim.clock()),
					resultFileName);
			
			
			//////
			printResults("Total network usage;" + NetworkUsageMonitor.getNetworkUsage(), resultFileName);
			printResults("getNetworkUsage() / CloudSim.clock);" + String.valueOf(NetworkUsageMonitor.getNetworkUsage() / CloudSim.clock()), resultFileName);
			printResults("CloudSim.clock;" + CloudSim.clock(), resultFileName);
			
			//"End=============NETWORK USAGE==============="/
			
			
			
			
			
			
			
			
			
			
			//Begin==============MIGRATIONS================="/
			printResults("Total of migrations;" + MyStatistics.getInstance().getTotalMigrations(), resultFileName);
			
			printResults("Total of handoff;" + MyStatistics.getInstance().getTotalHandoff(), resultFileName);
			printResults("Different Cloudlets reached along the user's path;" +  MyStatistics.getInstance().getMyCountLowestLatency(), resultFileName);
			
				
			

			printResults("Average of without connection;"
					+ MyStatistics.getInstance().getAverageWithoutConnection(),
					resultFileName);
						

			printResults("Average of without Vm;"
					+ MyStatistics.getInstance().getAverageWithoutVmTime(),
					resultFileName);
			
			
			

			printResults("Average of delay after new Connectionl"
					+ MyStatistics.getInstance().getAverageDelayAfterNewConnection(), resultFileName);
			
			
			double tempoMigracaoMax = 0.0;
			for (Entry<Integer, Double> test : MyStatistics.getInstance().getMigrationTime().entrySet()) {
				System.out.println("SmartThing" + test.getKey() + ": "
					+ MyStatistics.getInstance().getMigrationTime().get(test.getKey()) + " - Max: "
					+ MyStatistics.getInstance().getMaxMigrationTime().get(test.getKey()));
				tempoMigracaoMax = Math.max(tempoMigracaoMax, MyStatistics.getInstance()
					.getMaxMigrationTime().get(test.getKey()));
			}
						
			printResults("Average of Time of Migrations;"
					+ MyStatistics.getInstance().getAverageMigrationTime()
					, resultFileName);
			
			printResults("Hightest Time of Migrations;" + tempoMigracaoMax, resultFileName);
						
			
			
			
			//Average of Downtime
			printResults("Average of Downtime;" + String.valueOf(MyStatistics.getInstance().getAverageDowntime()),
					resultFileName);
			

			//Max Downtime
			double tempoDowntimeMax = 0.0;
			for (Entry<Integer, Double> test : MyStatistics.getInstance().getDowntime().entrySet()) {
				System.out.println("SmartThing" + test.getKey() + ": "
					+ MyStatistics.getInstance().getDowntime().get(test.getKey()) + " - Max: "
					+ MyStatistics.getInstance().getMaxDowntime().get(test.getKey()));
				tempoDowntimeMax += MyStatistics.getInstance().getMaxDowntime().get(test.getKey());
			}
			
			printResults("Max Downtime;" + tempoDowntimeMax, resultFileName);
			
			
			//Tuple lost
			printResults("Tuple lost;" + (((double) MyStatistics.getInstance().getMyCountLostTuple() / MyStatistics
					.getInstance().getMyCountTotalTuple())) * 100 + "%",
				resultFileName);
			
			printResults("Tuple lost;" + MyStatistics.getInstance().getMyCountLostTuple(), resultFileName);
			printResults("Total tuple;" + MyStatistics.getInstance().getMyCountTotalTuple(), resultFileName);
			//End==============MIGRATIONS================="/
			
				
			
	}
	50.95658793142547
175.5924671519315
93.62573187604451
176.32980958069675
96.45001300985358
1190.736200116051
14.562446390569589
53.24351421819301
6.500132119918035E9	4.5139806388319686E7
4.44820242685363E7
4.453291850939587E7
4.4459504587161146E7
4.4491993652248345E7
0.0021333333333333334	1152.0	540000.0
63.83303333333333	3.4469838E7	540000.0
22889.676493516632	1.2360425306498981E10	540000.0
22953.509526849964	1.2394895144498981E10	540000.0
9
14
1043.7478761451785
114135.46568048376
404012.545051619
60099.91138449045
60099.91138449045
126.71748364798981
269.57446323306067
164.10582636567702
267.80478540901095
6.493770265505227E9	4.50956268437863E7
4.454930678265535E7
4.452745595263072E7
7.111111111111111E-4	384.0	540000.0
78.8815	4.259601E7	540000.0
7627.410573577122	4.1188017097316456E9	540000.0
7706.292073577121	4.1613977197316456E9	540000.0
1
8
1065.2461640291158
327454.2215156653
402102.6551944186
131979.74714531496
19796.962071797243
126.36366412465576
270.51753743423615
140.47252504053563
267.80478540901095
6.491410923064629E9	4.5079242521282144E7
4.4549019046764895E7
4.452766835026805E7
4.740740740740741E-4	256.0	540000.0
81.94366666666667	4.424958E7	540000.0
4995.929726533647	2.6978020523281693E9	540000.0
5077.873393200313	2.7420516323281693E9	540000.0
1
8
1065.2461640291158
428972.50584706734
382475.2275925074
233498.03147671698
11674.90157383585
126.07256409424684
278.7722161319689
140.46707548509175
1076.0553210520884
6.491396761949403E9	4.507914418020418E7
4.454737129724178E7
4.452466793367019E7
4.740740740740741E-4	256.0	540000.0
81.66836666666667	4.4100918E7	540000.0
4995.929726533647	2.6978020523281693E9	540000.0
5077.598093200314	2.7419029703281693E9	540000.0
1
8
1065.2461640291158
428972.50584706734
382475.2275925074
233498.03147671698
11674.90157383585
127.6164768567698
1075.4331777860643
143.49998579518027
1236.6924807213363
142.74303261904757
1177.0999999999767
6.49589732077809E9	4.511039806095895E7
4.462055626134438E7
4.488294045328186E7
4.460034928938358E7
7.111111111111111E-4	384.0	540000.0
153.0290777777778	8.2635702E7	540000.0
7503.030611659378	4.0516365302960644E9	540000.0
7656.0596894371565	4.1342722322960644E9	540000.0
2
13
1092.5479340410461
428972.23113904125
382474.119607111
233497.7567686909
11674.887838434544
128.375647530893
1075.4331777860643
167.79133250708136
325.25091945717577
168.88188592888935
1176.941100556578
6.4998857526387415E9	4.51380955044357E7
4.464216392558189E7
4.477711332297028E7
4.4726920362914205E7
0.0011851851851851852	640.0	540000.0
137.5878111111111	7.4297418E7	540000.0
12765.992305746326	6.893635845103016E9	540000.0
12903.580116857436	6.967933263103016E9	540000.0
2
13
1092.5479340410461
327453.9468076392
402277.8636377514
131979.47243728887
19796.920865593333
127.43694971593938
310.4529985070112
169.71949976394785
1327.6739191600936
375.2555407242324
32338.14197027881
96.72585636386209
178.77615926088765
83.50046929403327
1075.153847053065
6.503601228408298E9	4.5163897419502065E7
4.472455627629407E7
4.471901586155146E7
4.471762363911658E7
4.493850983302464E7
4.476147194485025E7
0.0016592592592592592	896.0	540000.0
224.29185555555554	1.21117602E8	540000.0
17804.867281515635	9.614628332018442E9	540000.0
18029.15913707119	9.735745934018442E9	540000.0
3
17
1093.2314982138355
328358.93462155736
453984.03485636413
131551.09228169406
19732.66384225411
185.6907839084174
1128.7883346731542
170.51785249786477
3431.0999999999767
143.07031284489364
1076.1944309541723
113.91504556849807
4237.8227838308085
7.226870667417436E9	5.018660185706553E7
5.014343918915099E7
5.030132178580461E7
5.017901055599003E7
4.9755967508433715E7
0.0010666666666666667	640.0	600000.0
186.76721	1.12060326E8	600000.0
11438.307718723883	6.86298463123433E9	600000.0
11625.074928723883	6.97504495723433E9	600000.0
4
30
1074.9258834549103
345810.94698505907
383501.69984207745
131336.4206604393
19700.463099065895
211.03456930128397
1187.5698143529007
149.3362353620427
3467.0999999999767
97.733178941089
1075.2724498057505
null
null
209.53092925536987
1498.7921422472573
138.1356938481542
1617.0999999999767
96.8756053658205
1075.2724498057505
null
null
